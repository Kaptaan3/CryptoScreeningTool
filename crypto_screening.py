# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cqGtIAEZOYCgLWe4UEFr8srdap7YCunA
"""

!pip install requests pandas gspread oauth2client python-telegram-bot

# Install required libraries
!pip install requests pandas gspread oauth2client python-telegram-bot

# Import required libraries
import requests
import pandas as pd
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Bot

# Telegram Bot settings
TELEGRAM_TOKEN = '8075243972:AAHe-O6OuYyC6G86iJO4L7jsomd-xx-85IU'  # Replace with your new token after revoking
CHAT_ID = '7229911288'  # Your Telegram user ID

# Google Sheets setup (using hardcoded JSON)
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
creds_json = {
    "type": "service_account",
    "project_id": "cryptotool-454717",
    "private_key_id": "84d4dad266aa192a54da6d728eb66c5e18a0d851",
    "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCbA8l16sUSzPtu\nDGE1yMpCCGfu3vfWvxAX9fTCanOJvCRAZDlgWVrvwSY84n20tuAbZ1/1pqiuWMGL\n2YyDdIPQjBTtNB9sbkQy0v83A56C5kjw6XZDWqfHSPmAa6nbquD2XoQm+S3AVt3C\niD77AuGOl3g7RIAaxnVDTvjwqwuJ8IV6PlGsOccdbBUSu0mg/gGWymbhWumA6VJN\nab9CdABCYwWH6jHiKL7sEAZ/J/TzVrjS+zWtsAzzFx45DsdifsCjn4IAiX3dYSGz\nsC0pN8zU6Q2Ll8mNtoAotgtLE+eNCqUR8tjZIfgqIfgxUN8tln0zvNzrsqv360Y5\nc0PriJMhAgMBAAECggEACvP/zHHwBmXO/0XnKYR8TCGpbF67XuRlt/e0WXdpngoZ\n+qXKSxVNQGMit0serEH+wFjz1hj2UslpNZ9D1zcIqFf5k5ArBz+cWIYBrAq4rNGm\nRkWMynIRqFpu7MTOvfuLRUVE67cQJUbOCRSU9KoNs4Re5bsvnRS4TO771o+Tc2Xb\n9ZqXJ3MWIV5fEZPAmmuCYLxQBK3Oo8adjIazB/7RnJeYbP7vAXWlzCAPRNWeOAmM\niowx+q5pcT0TXCK2WCBKRXYIccOdllJ/sS2suwe45lAGhlMRpqjErPcMsVMO6sZZ\nfpOCIFQUFvNUnXXUhD/Av6/L3+UM05N7xAK8d51TRQKBgQDIRzzjKluk0d0Q0r7h\n7mrNNHyhArMjyTYSGO8xPg9B4bgtTPT/7l6WRv7wBFn0D6CPrnJy045prP3WA3Q4\nPPC33ECDP7U/3lmTcbeTfZavhhdk7GLGWrMKHk2gbuEOBrM/zz+pvTD3QaCaNYgH\n0dREc7/ozd0Gjlu2kUJUln+s9QKBgQDGJKu6tlFPloIK33VlGoOSITnCqfBwAtfC\nxlQFBByQ98VdkSMpnEvkk6ke8Z0BnQggbivihaNPZtpLv+culzjnm/GN+V216+Wg\nDIUpT50xe+8JXGgb20VIwFSeFiKAFjMdgf+WVLEIQlua/91aNUDVM/8F9lbbZxVl\nM0Svkmjx/QKBgHemX5DTcHayTiDL1vABUNsRfVdv1ngNsHj1XokLq2/PmwmtTT1N\nOkMLXSklYFw3rdPJA2ToUM9/YxKlc5xZg/JD6mK+/9iNTPSSXnsF760jLfzEYGpi\nK05jNjsfouKPTC1V8pHEjmlZUspuKruJNwhCIqfBvUc6az5R38/LLbG1AoGBAMRp\nLWHTwB4oj5e/kls6QRnlnZ/9XL1r0/zbJAYk4TxCn330lOp2aDSYuphV4NDsnFWp\nYA8XcZ8P0WwtOjjQ5jOQPY4CloXy5JgWURl2NdgLhhO9aeXTIYbQQBDE2EYnu1uQ\ntY6LPUF2pd+rqfv1teKhvDZozgiG0oqSm49+jlDxAoGBALwAjFyfthiiJT6ZFN2C\nPdgGrO2JQ0uqLa13BwThFQYbTUIKMutXafxJCS01oT3iCFHdGZAFWJD/kTmJW6sF\nG34iuhEKx14I75yoviRUFvMLrRZQGqdOSeuUtQ7kLzICow8dZ6qK5YH/Q0Wbqb9y\ngae/Z6HLhoHgE3PSz5zxg0LG\n-----END PRIVATE KEY-----\n",
    "client_email": "crypto-sheet-access@cryptotool-454717.iam.gserviceaccount.com",
    "client_id": "106761587264997393064",
    "auth_uri": "https://accounts.google.com/o/oauth2/auth",
    "token_uri": "https://oauth2.googleapis.com/token",
    "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
    "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/crypto-sheet-access%40cryptotool-454717.iam.gserviceaccount.com",
    "universe_domain": "googleapis.com"
}
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_json, scope)
client = gspread.authorize(creds)
sheet = client.open("CryptoScreeningTool").sheet1  # Replace with your Google Sheet name

# Fetch data from CoinGecko API
def fetch_crypto_data():
    url = "https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=100&page=1"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        print("Error fetching data:", response.status_code)
        return []

# Screening and scoring function
def screen_coins(data):
    potential_coins = []
    for coin in data:
        market_cap = coin.get('market_cap', 0)
        volume = coin.get('total_volume', 0)
        price_change = coin.get('price_change_percentage_24h', 0) or 0

        # Filter criteria
        if (1_000_000 < market_cap < 100_000_000 and
            volume > 500_000 and
            price_change > 0):
            # Simple scoring (customize as needed)
            score = (volume / 1_000_000) + (price_change * 2)  # Example: Volume + 2x price change
            if score > 50:  # Threshold for "pump potential"
                potential_coins.append({
                    'name': coin['name'],
                    'market_cap': market_cap,
                    'volume': volume,
                    'price_change_24h': price_change,
                    'score': score
                })
    return potential_coins

# Send Telegram alert (synchronous version)
def send_telegram_alert(coins):
    bot = Bot(token=TELEGRAM_TOKEN)
    for coin in coins:
        message = (f"Potential Pump Alert!\n"
                   f"Coin: {coin['name']}\n"
                   f"Market Cap: ${coin['market_cap']:,.0f}\n"
                   f"Volume: ${coin['volume']:,.0f}\n"
                   f"24h Change: {coin['price_change_24h']:.2f}%\n"
                   f"Score: {coin['score']:.2f}")
        bot.send_message(chat_id=CHAT_ID, text=message)

# Save to Google Sheets
def save_to_sheets(coins):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    headers = ['Timestamp', 'Name', 'Market Cap', 'Volume', '24h Change', 'Score']
    data = [[timestamp, coin['name'], coin['market_cap'], coin['volume'],
             coin['price_change_24h'], coin['score']] for coin in coins]

    # Clear existing data and update
    sheet.clear()
    sheet.append_row(headers)
    for row in data:
        sheet.append_row(row)

# Main execution
def main():
    print("Fetching crypto data...")
    data = fetch_crypto_data()
    if not data:
        return

    print("Screening coins...")
    coins = screen_coins(data)

    if coins:
        print(f"Found {len(coins)} potential coins!")
        df = pd.DataFrame(coins)
        print(df)

        # Save to Google Sheets
        print("Saving to Google Sheets...")
        save_to_sheets(coins)

        # Send Telegram alerts
        print("Sending Telegram alerts...")
        send_telegram_alert(coins)
    else:
        print("No coins met the criteria.")

if __name__ == "__main__":
    main()

# Install required libraries
!pip install requests pandas gspread oauth2client python-telegram-bot

# Import required libraries
import requests
import pandas as pd
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Bot

# Telegram Bot settings
TELEGRAM_TOKEN = '8075243972:AAHe-O6OuYyC6G86iJO4L7jsomd-xx-85IU'  # Replace with your new token after revoking
CHAT_ID = '7229911288'  # Your Telegram user ID

# Google Sheets setup (using hardcoded JSON)
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
creds_json = {
    "type": "service_account",
    "project_id": "cryptotool-454717",
    "private_key_id": "84d4dad266aa192a54da6d728eb66c5e18a0d851",
    "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCbA8l16sUSzPtu\nDGE1yMpCCGfu3vfWvxAX9fTCanOJvCRAZDlgWVrvwSY84n20tuAbZ1/1pqiuWMGL\n2YyDdIPQjBTtNB9sbkQy0v83A56C5kjw6XZDWqfHSPmAa6nbquD2XoQm+S3AVt3C\niD77AuGOl3g7RIAaxnVDTvjwqwuJ8IV6PlGsOccdbBUSu0mg/gGWymbhWumA6VJN\nab9CdABCYwWH6jHiKL7sEAZ/J/TzVrjS+zWtsAzzFx45DsdifsCjn4IAiX3dYSGz\nsC0pN8zU6Q2Ll8mNtoAotgtLE+eNCqUR8tjZIfgqIfgxUN8tln0zvNzrsqv360Y5\nc0PriJMhAgMBAAECggEACvP/zHHwBmXO/0XnKYR8TCGpbF67XuRlt/e0WXdpngoZ\n+qXKSxVNQGMit0serEH+wFjz1hj2UslpNZ9D1zcIqFf5k5ArBz+cWIYBrAq4rNGm\nRkWMynIRqFpu7MTOvfuLRUVE67cQJUbOCRSU9KoNs4Re5bsvnRS4TO771o+Tc2Xb\n9ZqXJ3MWIV5fEZPAmmuCYLxQBK3Oo8adjIazB/7RnJeYbP7vAXWlzCAPRNWeOAmM\niowx+q5pcT0TXCK2WCBKRXYIccOdllJ/sS2suwe45lAGhlMRpqjErPcMsVMO6sZZ\nfpOCIFQUFvNUnXXUhD/Av6/L3+UM05N7xAK8d51TRQKBgQDIRzzjKluk0d0Q0r7h\n7mrNNHyhArMjyTYSGO8xPg9B4bgtTPT/7l6WRv7wBFn0D6CPrnJy045prP3WA3Q4\nPPC33ECDP7U/3lmTcbeTfZavhhdk7GLGWrMKHk2gbuEOBrM/zz+pvTD3QaCaNYgH\n0dREc7/ozd0Gjlu2kUJUln+s9QKBgQDGJKu6tlFPloIK33VlGoOSITnCqfBwAtfC\nxlQFBByQ98VdkSMpnEvkk6ke8Z0BnQggbivihaNPZtpLv+culzjnm/GN+V216+Wg\nDIUpT50xe+8JXGgb20VIwFSeFiKAFjMdgf+WVLEIQlua/91aNUDVM/8F9lbbZxVl\nM0Svkmjx/QKBgHemX5DTcHayTiDL1vABUNsRfVdv1ngNsHj1XokLq2/PmwmtTT1N\nOkMLXSklYFw3rdPJA2ToUM9/YxKlc5xZg/JD6mK+/9iNTPSSXnsF760jLfzEYGpi\nK05jNjsfouKPTC1V8pHEjmlZUspuKruJNwhCIqfBvUc6az5R38/LLbG1AoGBAMRp\nLWHTwB4oj5e/kls6QRnlnZ/9XL1r0/zbJAYk4TxCn330lOp2aDSYuphV4NDsnFWp\nYA8XcZ8P0WwtOjjQ5jOQPY4CloXy5JgWURl2NdgLhhO9aeXTIYbQQBDE2EYnu1uQ\ntY6LPUF2pd+rqfv1teKhvDZozgiG0oqSm49+jlDxAoGBALwAjFyfthiiJT6ZFN2C\nPdgGrO2JQ0uqLa13BwThFQYbTUIKMutXafxJCS01oT3iCFHdGZAFWJD/kTmJW6sF\nG34iuhEKx14I75yoviRUFvMLrRZQGqdOSeuUtQ7kLzICow8dZ6qK5YH/Q0Wbqb9y\ngae/Z6HLhoHgE3PSz5zxg0LG\n-----END PRIVATE KEY-----\n",
    "client_email": "crypto-sheet-access@cryptotool-454717.iam.gserviceaccount.com",
    "client_id": "106761587264997393064",
    "auth_uri": "https://accounts.google.com/o/oauth2/auth",
    "token_uri": "https://oauth2.googleapis.com/token",
    "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
    "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/crypto-sheet-access%40cryptotool-454717.iam.gserviceaccount.com",
    "universe_domain": "googleapis.com"
}
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_json, scope)
client = gspread.authorize(creds)
sheet = client.open("CryptoScreeningTool").sheet1  # Replace with your Google Sheet name

# Fetch data from CoinGecko API
def fetch_crypto_data():
    url = "https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=250&page=1"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        print("Error fetching data:", response.status_code)
        return []

# Screening and scoring function
def screen_coins(data):
    potential_coins = []
    total_coins = len(data)
    print(f"Total coins fetched: {total_coins}")

    market_cap_passed = 0
    volume_passed = 0
    price_change_passed = 0
    score_passed = 0

    for coin in data:
        market_cap = coin.get('market_cap', 0)
        volume = coin.get('total_volume', 0)
        price_change = coin.get('price_change_percentage_24h', 0) or 0

        # Relaxed filter criteria
        if 500_000 < market_cap < 100_000_000:
            market_cap_passed += 1
            if volume > 100_000:
                volume_passed += 1
                if price_change > -5:
                    price_change_passed += 1
                    score = (volume / 1_000_000) + (price_change * 2)
                    if score > 10:
                        score_passed += 1
                        potential_coins.append({
                            'name': coin['name'],
                            'market_cap': market_cap,
                            'volume': volume,
                            'price_change_24h': price_change,
                            'score': score
                        })

    print(f"Coins passing market cap filter: {market_cap_passed}")
    print(f"Coins passing volume filter: {volume_passed}")
    print(f"Coins passing price change filter: {price_change_passed}")
    print(f"Coins passing score filter: {score_passed}")
    return potential_coins

# Send Telegram alert (synchronous version)
def send_telegram_alert(coins):
    bot = Bot(token=TELEGRAM_TOKEN)
    for coin in coins:
        message = (f"Potential Pump Alert!\n"
                   f"Coin: {coin['name']}\n"
                   f"Market Cap: ${coin['market_cap']:,.0f}\n"
                   f"Volume: ${coin['volume']:,.0f}\n"
                   f"24h Change: {coin['price_change_24h']:.2f}%\n"
                   f"Score: {coin['score']:.2f}")
        bot.send_message(chat_id=CHAT_ID, text=message)

# Save to Google Sheets
def save_to_sheets(coins):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    headers = ['Timestamp', 'Name', 'Market Cap', 'Volume', '24h Change', 'Score']
    data = [[timestamp, coin['name'], coin['market_cap'], coin['volume'],
             coin['price_change_24h'], coin['score']] for coin in coins]

    # Clear existing data and update
    sheet.clear()
    sheet.append_row(headers)
    for row in data:
        sheet.append_row(row)

# Main execution
def main():
    print("Fetching crypto data...")
    data = fetch_crypto_data()
    if not data:
        return

    print("Screening coins...")
    coins = screen_coins(data)

    if coins:
        print(f"Found {len(coins)} potential coins!")
        df = pd.DataFrame(coins)
        print(df)

        # Save to Google Sheets
        print("Saving to Google Sheets...")
        save_to_sheets(coins)

        # Send Telegram alerts
        print("Sending Telegram alerts...")
        send_telegram_alert(coins)
    else:
        print("No coins met the criteria.")

if __name__ == "__main__":
    main()